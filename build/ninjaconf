#!/usr/bin/env ruby

class NinjaPath < Struct.new(:path)
  private :path=
  require 'pathname'

  class << self
    attr_accessor :base_path, :src_glob, :out_path

    def base_src_path
      src_glob.split("/").first
    end

    def each
      Dir[src_glob].each { |path| yield NinjaPath.new(File.expand_path(path)) }
    end
  end

  def np(path)
    NinjaPath.new path
  end

  def pn(_path = path)
    Pathname.new(_path)
  end

  def c(conf)
    self.class.send(conf)
  end

  def relative_to_out_path
    np pn(c :out_path).join(pn.relative_path_from(pn(c :base_path)))
  end

  # rename the file to a new one with the given extension.
  def with_extension(new_ext)
    basepath, name = pn.split
    np pn(basepath).join("#{File.basename(name, File.extname(name))}.#{new_ext}")
  end

  def to_s
    pn.absolute? ? pn.relative_path_from(pn(c :base_path)).to_s : pn.to_s
  end
end

################################################################################

NinjaPath.base_path = Dir.getwd
NinjaPath.src_glob = "src/**/*.vala"
NinjaPath.out_path = "obj"

################################################################################

puts <<-NINJA_RULES
rule fastvapi
  command = valac --fast-vapi=$out $in

NINJA_RULES

# vapi files.
NinjaPath.each do |inpath|
  outpath = inpath.relative_to_out_path.with_extension("vapi")

  puts "build #{outpath}: fastvapi #{inpath}"
end
